
Glove Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000002c0  00000354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080010e  0080010e  00000362  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  000003b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bd6  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f3e  00000000  00000000  000021e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ca5  00000000  00000000  00003124  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  00003dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a20  00000000  00000000  000040c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000258  00000000  00000000  00004ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00004d40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_13>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 ec       	ldi	r30, 0xC0	; 192
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ae 30       	cpi	r26, 0x0E	; 14
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ae e0       	ldi	r26, 0x0E	; 14
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ab 31       	cpi	r26, 0x1B	; 27
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
  ea:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  f2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <system_init>
  f6:	08 95       	ret

000000f8 <PWM_0_pwm_handler_cb>:
volatile uint16_t         PWM_0_isr_executed_counter = 0;
volatile PWM_0_register_t PWM_0_duty;

void PWM_0_pwm_handler_cb(void)
{
	PWM_0_duty++;
  f8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <PWM_0_duty>
  fc:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <PWM_0_duty+0x1>
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <PWM_0_duty+0x1>
 106:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <PWM_0_duty>
	// Output duty cycle on PWM CH0
	PWM_0_load_duty_cycle_ch1(PWM_0_duty);
 10a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <PWM_0_duty>
 10e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <PWM_0_duty+0x1>
 112:	0e 94 1e 01 	call	0x23c	; 0x23c <PWM_0_load_duty_cycle_ch1>
	PWM_0_isr_executed_counter++;
 116:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 11a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
 124:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 128:	08 95       	ret

0000012a <PWM_0_test_pwm_basic>:

uint8_t PWM_0_test_pwm_basic(void)
{

	// Enable pin output
	PWM_0_enable_output_ch1();
 12a:	0e 94 13 01 	call	0x226	; 0x226 <PWM_0_enable_output_ch1>

	// Set channel 0 duty cycle value register value to specified value
	PWM_0_load_duty_cycle_ch1(0x3f);
 12e:	8f e3       	ldi	r24, 0x3F	; 63
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 1e 01 	call	0x23c	; 0x23c <PWM_0_load_duty_cycle_ch1>

	// Set counter register value
	PWM_0_load_counter(0);
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 19 01 	call	0x232	; 0x232 <PWM_0_load_counter>

	// Test IRQ mode

	ENABLE_INTERRUPTS();
 13e:	78 94       	sei

	PWM_0_register_callback(PWM_0_pwm_handler_cb);
 140:	8c e7       	ldi	r24, 0x7C	; 124
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 23 01 	call	0x246	; 0x246 <PWM_0_register_callback>

	// Wait for ISR to be executed 65000 times
	while (PWM_0_isr_executed_counter < 65000)
 148:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 14c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 150:	88 3e       	cpi	r24, 0xE8	; 232
 152:	9d 4f       	sbci	r25, 0xFD	; 253
 154:	c8 f3       	brcs	.-14     	; 0x148 <PWM_0_test_pwm_basic+0x1e>
		;

	return 1;
}
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	08 95       	ret

0000015a <main>:
#include <pwm_basic_example.h>

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 15a:	0e 94 79 00 	call	0xf2	; 0xf2 <atmel_start_init>

	PWM_0_test_pwm_basic();
 15e:	0e 94 95 00 	call	0x12a	; 0x12a <PWM_0_test_pwm_basic>
}
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	08 95       	ret

00000168 <ADC_0_init>:
 */
int8_t ADC_0_init()
{

	/* Enable clock to write ADC registers */
	PRR0 &= ~(1 << PRADC);
 168:	e4 e6       	ldi	r30, 0x64	; 100
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	8e 7f       	andi	r24, 0xFE	; 254
 170:	80 83       	st	Z, r24

	ADMUX = (0x00 << REFS0)   /* AREF, Internal Vref turned off */
 172:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	        | (0 << ADLAR)    /* Left Adjust Result: disabled */
	        | (0x00 << MUX0); /* ADC Single Ended Input pin 0 */

	ADCSRA = (1 << ADEN)        /* ADC: enabled */
 176:	81 e8       	ldi	r24, 0x81	; 129
 178:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	         | (0 << ADATE)     /* Auto Trigger: disabled */
	         | (0 << ADIE)      /* ADC Interrupt: disabled */
	         | (0x01 << ADPS0); /* 2 */
	ADCSRB = (0x00 << ADTS0)    /* Free Running mode */
 17c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	         | (0 << ACME)      /* Analog Comparator Multiplexer: disabled */
	    ;

	return 0;
}
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	08 95       	ret

00000184 <PWM_0_initialization>:
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 184:	21 9a       	sbi	0x04, 1	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 186:	29 98       	cbi	0x05, 1	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 188:	22 9a       	sbi	0x04, 2	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 18a:	2a 98       	cbi	0x05, 2	; 5
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	PWM_0_init();
 18c:	0e 94 00 01 	call	0x200	; 0x200 <PWM_0_init>
 190:	08 95       	ret

00000192 <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 192:	50 98       	cbi	0x0a, 0	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 194:	58 98       	cbi	0x0b, 0	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 196:	51 9a       	sbi	0x0a, 1	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 198:	59 98       	cbi	0x0b, 1	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 19a:	0e 94 3a 01 	call	0x274	; 0x274 <USART_0_init>
 19e:	08 95       	ret

000001a0 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTWI1) | (1 << PRTIM4) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTIM3);
 1a0:	8d e3       	ldi	r24, 0x3D	; 61
 1a2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 1ac:	94 b1       	in	r25, 0x04	; 4
 1ae:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 1b0:	95 b1       	in	r25, 0x05	; 5
 1b2:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 1b4:	97 b1       	in	r25, 0x07	; 7
 1b6:	90 78       	andi	r25, 0x80	; 128
 1b8:	97 b9       	out	0x07, r25	; 7

		PORTC |= mask;
 1ba:	98 b1       	in	r25, 0x08	; 8
 1bc:	9f 67       	ori	r25, 0x7F	; 127
 1be:	98 b9       	out	0x08, r25	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 1c0:	9a b1       	in	r25, 0x0a	; 10
 1c2:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 1c4:	9b b1       	in	r25, 0x0b	; 11
 1c6:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 1c8:	8d b1       	in	r24, 0x0d	; 13
 1ca:	80 7f       	andi	r24, 0xF0	; 240
 1cc:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 1ce:	8e b1       	in	r24, 0x0e	; 14
 1d0:	8f 60       	ori	r24, 0x0F	; 15
 1d2:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	60 e8       	ldi	r22, 0x80	; 128
 1d8:	81 e6       	ldi	r24, 0x61	; 97
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 1e0:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 1e2:	15 be       	out	0x35, r1	; 53

/* Configure pins and initialize registers */
void ADC_0_initialization(void)
{

	ADC_0_init();
 1e4:	0e 94 b4 00 	call	0x168	; 0x168 <ADC_0_init>

	sysctrl_init();

	ADC_0_initialization();

	PWM_0_initialization();
 1e8:	0e 94 c2 00 	call	0x184	; 0x184 <PWM_0_initialization>

	USART_0_initialization();
 1ec:	0e 94 c9 00 	call	0x192	; 0x192 <USART_0_initialization>
 1f0:	08 95       	ret

000001f2 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 1f2:	2f b7       	in	r18, 0x3f	; 63
	cli
 1f4:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 1f6:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 1f8:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 1fa:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 1fc:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 1fe:	08 95       	ret

00000200 <PWM_0_init>:
 *
 * \return Nothing
 */
void PWM_0_load_top(PWM_0_register_t top_value)
{
	OCR1A = top_value;
 200:	e4 e6       	ldi	r30, 0x64	; 100
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	87 7f       	andi	r24, 0xF7	; 247
 208:	80 83       	st	Z, r24
 20a:	83 e2       	ldi	r24, 0x23	; 35
 20c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 210:	81 e1       	ldi	r24, 0x11	; 17
 212:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 216:	8f e3       	ldi	r24, 0x3F	; 63
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 21e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	08 95       	ret

00000226 <PWM_0_enable_output_ch1>:
 226:	e0 e8       	ldi	r30, 0x80	; 128
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	80 62       	ori	r24, 0x20	; 32
 22e:	80 83       	st	Z, r24
 230:	08 95       	ret

00000232 <PWM_0_load_counter>:
 232:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 236:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 23a:	08 95       	ret

0000023c <PWM_0_load_duty_cycle_ch1>:
 *
 * \return Nothing
 */
void PWM_0_load_duty_cycle_ch1(PWM_0_register_t duty_value)
{
	OCR1B = duty_value;
 23c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 240:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 244:	08 95       	ret

00000246 <PWM_0_register_callback>:
 *
 * \return Nothing.
 */
void PWM_0_register_callback(pwm_irq_cb_t f)
{
	PWM_0_cb = f;
 246:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <PWM_0_cb+0x1>
 24a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <PWM_0_cb>
 24e:	08 95       	ret

00000250 <__vector_13>:
}

ISR(TIMER1_OVF_vect)
{
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	8f 93       	push	r24
	static volatile uint8_t callback_count = 0;

	// Clear the interrupt flag
	TIFR1 = TOV1;
 25c:	16 ba       	out	0x16, r1	; 22

	// callback function - called every 0 passes
	if ((++callback_count >= PWM_0_INTERRUPT_CB_RATE) && (PWM_0_INTERRUPT_CB_RATE != 0)) {
 25e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <callback_count.1827>
 262:	8f 5f       	subi	r24, 0xFF	; 255
 264:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <callback_count.1827>
		if (PWM_0_cb != NULL) {
			PWM_0_cb();
		}
	}
}
 268:	8f 91       	pop	r24
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(UCSR0A & (1 << RXC0)))
		;
	return UDR0;
}
 274:	e4 e6       	ldi	r30, 0x64	; 100
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	8d 7f       	andi	r24, 0xFD	; 253
 27c:	80 83       	st	Z, r24
 27e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 282:	83 e3       	ldi	r24, 0x33	; 51
 284:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 288:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 28c:	88 e9       	ldi	r24, 0x98	; 152
 28e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <__iob+0x3>
 29a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <__iob+0x2>
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	08 95       	ret

000002a2 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(UCSR0A & (1 << UDRE0)))
 2a2:	e0 ec       	ldi	r30, 0xC0	; 192
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	90 81       	ld	r25, Z
 2a8:	95 ff       	sbrs	r25, 5
 2aa:	fd cf       	rjmp	.-6      	; 0x2a6 <USART_0_write+0x4>
		;
	UDR0 = data;
 2ac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2b0:	08 95       	ret

000002b2 <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
 2b2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <USART_0_write>
	return 0;
}
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	08 95       	ret

000002bc <_exit>:
 2bc:	f8 94       	cli

000002be <__stop_program>:
 2be:	ff cf       	rjmp	.-2      	; 0x2be <__stop_program>
